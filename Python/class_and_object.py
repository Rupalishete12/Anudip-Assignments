# -*- coding: utf-8 -*-
"""Class and object.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2C41B8lbyxyM14aYhM2-ya2zZo2dg6c

Que1. Define Class name Car with attributes make, model and year. Include a method called get_info() that prints out the details of the car.
"""

class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def get_info(self):
        print(" Make is:",self.make)
        print(" Model is:",self.model)
        print(" Year:",self.year)

my_car = Car("Toyota", "Camry", 2023)
my_car.get_info()

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)
rect = Rectangle(4, 2)

print("Area:", rect.area())

print("Perimeter:", rect.perimeter())

"""Question 3: Define a class called Employee with attributes name, position, and salary. Include a method called raise_salary() that takes a percentage increase as an argument and updates the salary accordingly."""

class Employee:
    def __init__(self, name, position, salary):
        self.name = name
        self.position = position
        self.salary = salary

    def raise_salary(self, percentage):
        # Calculate the raise amount and update the salary
        raise_amount = self.salary * (percentage / 100)
        self.salary += raise_amount

    def display_info(self):
        return f"Name: {self.name}, Position: {self.position}, Salary: {self.salary}"

# Create an instance of Employee
employee = Employee("Alice", "Software Engineer", 70000)

# Display initial information
print(employee.display_info())

# Raise salary by 10%
employee.raise_salary(10)

# Display updated information
print(employee.display_info())

"""Question 4: Create a class named BankAccount with attributes account_number, holder_name, and balance. Include methods to deposit money, withdraw money, and check the balance. Create an instance of the BankAccount class, deposit  100,withdraw 50, and then print the remaining balance."""

class BankAccount:
    def __init__(self, account_number, holder_name, balance=0):
        self.account_number = account_number
        self.holder_name = holder_name
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            return f"Deposited: {amount}. New balance: {self.balance}"
        else:
            return "Deposit amount must be positive."

    def withdraw(self, amount):
        if amount > 0:
            if amount <= self.balance:
                self.balance -= amount
                return f"Withdrew: {amount}. New balance: {self.balance}"
            else:
                return "Insufficient funds."
        else:
            return "Withdrawal amount must be positive."

    def check_balance(self):
        return f"Current balance: {self.balance}"

# Create an instance of BankAccount
account = BankAccount("123456789", "Alice", 0)

# Deposit 100
print(account.deposit(100))

# Withdraw 50
print(account.withdraw(50))

# Print the remaining balance
print(account.check_balance())

"""Question 5: Define a class named Circle with attributes radius and color. Include methods to calculate the area and circumference of the circle. Create an instance of the Circle class with radius 5 and color "blue", then print its area and circumference."""

class Circle:
    def __init__(self, radius, color):
        self.radius = radius
        self.color = color

    def area(self):
        return 3.14159 * (self.radius ** 2)  # Approximation of π

    def circumference(self):
        return 2 * 3.14159 * self.radius  # Approximation of π

# Create an instance of Circle
circle = Circle(5, "blue")
print("Area of the circle:", circle.area())
print("Circumference of the circle:" ,circle.circumference())

"""Question 6: Create a class named Book with attributes title, author, and price. Include a method called discount() that takes a percentage discount as an argument and updates the price accordingly. Create an instance of the Book class and call the discount() method with a 20% discount."""

class Book:
    def __init__(self, title, author, price):
        self.title = title
        self.author = author
        self.price = price

    def discount(self, percentage):
        self.price -= self.price * (percentage / 100)

# Create an instance of Book
book = Book("The Great Gatsby", "F. Scott Fitzgerald", 20.00)
book.discount(20)  # Apply a 20% discount
print("Price after discount:", book.price)

"""Question 7: Define a class called Student with attributes name, age, and grades. Include a method called calculate_average() that computes the average grade of the student. Create an instance of the Student class with name "Alice", age 20, and grades [90, 85, 88], then print the average grade."""

class Student:
    def __init__(self, name, age, grades):
        self.name = name
        self.age = age
        self.grades = grades

    def calculate_average(self):
        return sum(self.grades) / len(self.grades)

# Create an instance of Student
student = Student("Alice", 20, [90, 85, 88])
print("Average grade:", student.calculate_average())

"""Question 8: Create a class named Rectangle with attributes length and width. Include methods to calculate the area, perimeter, and diagonal of the rectangle. Create an instance of the Rectangle class with length 4 and width 3, then print its area, perimeter, and diagonal."""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

    def diagonal(self):
        # Using the Pythagorean theorem: diagonal = sqrt(length^2 + width^2)
        return (self.length ** 2 + self.width ** 2) ** 0.5  # Square root using exponentiation

# Create an instance of Rectangle
rectangle = Rectangle(4, 3)
print(f"Area of the rectangle: ",rectangle.area())
print("Perimeter of the rectangle:",rectangle.perimeter())
print("Diagonal of the rectangle:",rectangle.diagonal())

"""Question 9: Define a class named Person with attributes name, age, and gender. Include methods to update the age and display information about the person. Create an instance of the Person class with name "Alice", age 25, and gender "Female". Update the age to 30 and display the information about the person"""

class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def update_age(self, new_age):
        self.age = new_age

    def display_info(self):
        return f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}"

# Create an instance of Person
person = Person("Alice", 25, "Female")
person.update_age(30)  # Update age to 30
print(person.display_info())  # Display information about the person

"""Question 10: Create a class named BankAccount with attributes account_number, account_holder, and balance. Include methods to deposit and withdraw money, and to display the account details. Create two instances of the BankAccount class, one for savings account and one for checking account, and perform deposit and withdrawal operations on each."""

class BankAccount:
    def __init__(self, account_number, account_holder, balance=0):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return f"Deposited: {amount}. New balance: {self.balance}"

    def withdraw(self, amount):
        if amount > self.balance:
            return "Insufficient funds"
        self.balance -= amount
        return f"Withdrew: {amount}. New balance: {self.balance}"

    def display_account_details(self):
        return f"Account Number: {self.account_number}, Account Holder: {self.account_holder}, Balance: {self.balance}"

# Create instances of BankAccount
savings_account = BankAccount("SAV123", "Alice", 1000)
checking_account = BankAccount("CHK456", "Bob", 500)

# Perform operations
print(savings_account.deposit(200))  # Deposit into savings account
print(savings_account.withdraw(150))  # Withdraw from savings account
print(checking_account.deposit(300))  # Deposit into checking account
print(checking_account.withdraw(600))  # Attempt to withdraw more than balance

# Display account details
print(savings_account.display_account_details())
print(checking_account.display_account_details())

"""Question 11: Define a class called Rectangle with attributes length and width. Include methods to calculate the area and perimeter of the rectangle, and to display its dimensions. Create an instance of the Rectangle class with length 4 and width 5, then print its area, perimeter, and dimensions."""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

    def display_dimensions(self):
        return f"Length: {self.length}, Width: {self.width}"

# Create an instance of Rectangle
rectangle = Rectangle(4, 5)
print(f"Area of the rectangle: {rectangle.area()}")
print(f"Perimeter of the rectangle: {rectangle.perimeter()}")
print(rectangle.display_dimensions())

"""Question 12: Create a class named Student with attributes name, roll_number, and grades. Include methods to add grades, calculate the average grade, and display the student's information. Create an instance of the Student class with name "John", roll number "12345", and grades [85, 90, 88]. Add another grade (95), calculate the average grade, and display the student's information."""

class Student:
    def __init__(self, name, roll_number, grades):
        self.name = name
        self.roll_number = roll_number
        self.grades = grades

    def add_grade(self, grade):
        self.grades.append(grade)

    def calculate_average(self):
        return sum(self.grades) / len(self.grades)

    def display_info(self):
        return f"Name: {self.name}, Roll Number: {self.roll_number}, Grades: {self.grades}, Average: {self.calculate_average()}"

# Create an instance of Student
student = Student("John", "12345", [85, 90, 88])
student.add_grade(95)  # Add another grade
print(student.display_info())  # Display student's information

"""Question 13: Define a class called Triangle with attributes side1, side2, and side3. Include methods to check if the triangle is valid, calculate its perimeter, area, and display its sides. Create an instance of the Triangle class with side lengths 3, 4, and 5, then check if it is valid, calculate its perimeter and area, and display its sides."""

class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def is_valid(self):
        # A triangle is valid if the sum of any two sides is greater than the third side
        return (self.side1 + self.side2 > self.side3 and
                self.side1 + self.side3 > self.side2 and
                self.side2 + self.side3 > self.side1)

    def perimeter(self):
        return self.side1 + self.side2 + self.side3

    def area(self):
        # Using Heron's formula
        s = self.perimeter() / 2  # semi-perimeter
        return (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5

    def display_sides(self):
        return f"Sides: {self.side1}, {self.side2}, {self.side3}"

# Create an instance of Triangle
triangle = Triangle(3, 4, 5)

# Check if the triangle is valid, calculate perimeter and area, and display its sides
if triangle.is_valid():
    print("Triangle is valid.")
    print(f"Perimeter of the triangle: {triangle.perimeter()}")
    print(f"Area of the triangle: {triangle.area()}")
    print(triangle.display_sides())
else:
    print("Triangle is not valid.")